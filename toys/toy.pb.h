// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: toys/toy.proto

#ifndef PROTOBUF_toys_2ftoy_2eproto__INCLUDED
#define PROTOBUF_toys_2ftoy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/protobuf/math.pb.h"
// @@protoc_insertion_point(includes)

namespace tinker {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_toys_2ftoy_2eproto();
void protobuf_AssignDesc_toys_2ftoy_2eproto();
void protobuf_ShutdownFile_toys_2ftoy_2eproto();

class ToyBase;
class ToyBase_Material;
class ToyMesh;
class ToyMesh_Material;
class ToyPhys;
class ToyArea;
class Toy;

// ===================================================================

class ToyBase_Material : public ::google::protobuf::Message {
 public:
  ToyBase_Material();
  virtual ~ToyBase_Material();

  ToyBase_Material(const ToyBase_Material& from);

  inline ToyBase_Material& operator=(const ToyBase_Material& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToyBase_Material& default_instance();

  void Swap(ToyBase_Material* other);

  // implements Message ----------------------------------------------

  ToyBase_Material* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToyBase_Material& from);
  void MergeFrom(const ToyBase_Material& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 vertex_count = 2;
  inline bool has_vertex_count() const;
  inline void clear_vertex_count();
  static const int kVertexCountFieldNumber = 2;
  inline ::google::protobuf::uint32 vertex_count() const;
  inline void set_vertex_count(::google::protobuf::uint32 value);

  // required uint32 vertex_size_bytes = 3;
  inline bool has_vertex_size_bytes() const;
  inline void clear_vertex_size_bytes();
  static const int kVertexSizeBytesFieldNumber = 3;
  inline ::google::protobuf::uint32 vertex_size_bytes() const;
  inline void set_vertex_size_bytes(::google::protobuf::uint32 value);

  // optional int32 uv_offset = 5 [default = -1];
  inline bool has_uv_offset() const;
  inline void clear_uv_offset();
  static const int kUvOffsetFieldNumber = 5;
  inline ::google::protobuf::int32 uv_offset() const;
  inline void set_uv_offset(::google::protobuf::int32 value);

  // optional int32 normal_offset = 6 [default = -1];
  inline bool has_normal_offset() const;
  inline void clear_normal_offset();
  static const int kNormalOffsetFieldNumber = 6;
  inline ::google::protobuf::int32 normal_offset() const;
  inline void set_normal_offset(::google::protobuf::int32 value);

  // optional int32 tangent_offset = 7 [default = -1];
  inline bool has_tangent_offset() const;
  inline void clear_tangent_offset();
  static const int kTangentOffsetFieldNumber = 7;
  inline ::google::protobuf::int32 tangent_offset() const;
  inline void set_tangent_offset(::google::protobuf::int32 value);

  // optional int32 bitangent_offset = 8 [default = -1];
  inline bool has_bitangent_offset() const;
  inline void clear_bitangent_offset();
  static const int kBitangentOffsetFieldNumber = 8;
  inline ::google::protobuf::int32 bitangent_offset() const;
  inline void set_bitangent_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tinker.protobuf.ToyBase.Material)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_vertex_count();
  inline void clear_has_vertex_count();
  inline void set_has_vertex_size_bytes();
  inline void clear_has_vertex_size_bytes();
  inline void set_has_uv_offset();
  inline void clear_has_uv_offset();
  inline void set_has_normal_offset();
  inline void clear_has_normal_offset();
  inline void set_has_tangent_offset();
  inline void clear_has_tangent_offset();
  inline void set_has_bitangent_offset();
  inline void clear_has_bitangent_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 vertex_count_;
  ::google::protobuf::uint32 vertex_size_bytes_;
  ::google::protobuf::int32 uv_offset_;
  ::google::protobuf::int32 normal_offset_;
  ::google::protobuf::int32 tangent_offset_;
  ::google::protobuf::int32 bitangent_offset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_toys_2ftoy_2eproto();
  friend void protobuf_AssignDesc_toys_2ftoy_2eproto();
  friend void protobuf_ShutdownFile_toys_2ftoy_2eproto();

  void InitAsDefaultInstance();
  static ToyBase_Material* default_instance_;
};
// -------------------------------------------------------------------

class ToyBase : public ::google::protobuf::Message {
 public:
  ToyBase();
  virtual ~ToyBase();

  ToyBase(const ToyBase& from);

  inline ToyBase& operator=(const ToyBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToyBase& default_instance();

  void Swap(ToyBase* other);

  // implements Message ----------------------------------------------

  ToyBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToyBase& from);
  void MergeFrom(const ToyBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ToyBase_Material Material;

  // accessors -------------------------------------------------------

  // optional .tinker.protobuf.AABB visual_bounds = 1;
  inline bool has_visual_bounds() const;
  inline void clear_visual_bounds();
  static const int kVisualBoundsFieldNumber = 1;
  inline const ::tinker::protobuf::AABB& visual_bounds() const;
  inline ::tinker::protobuf::AABB* mutable_visual_bounds();
  inline ::tinker::protobuf::AABB* release_visual_bounds();
  inline void set_allocated_visual_bounds(::tinker::protobuf::AABB* visual_bounds);

  // optional .tinker.protobuf.AABB physics_bounds = 2;
  inline bool has_physics_bounds() const;
  inline void clear_physics_bounds();
  static const int kPhysicsBoundsFieldNumber = 2;
  inline const ::tinker::protobuf::AABB& physics_bounds() const;
  inline ::tinker::protobuf::AABB* mutable_physics_bounds();
  inline ::tinker::protobuf::AABB* release_physics_bounds();
  inline void set_allocated_physics_bounds(::tinker::protobuf::AABB* physics_bounds);

  // repeated .tinker.protobuf.ToyBase.Material material = 3;
  inline int material_size() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 3;
  inline const ::tinker::protobuf::ToyBase_Material& material(int index) const;
  inline ::tinker::protobuf::ToyBase_Material* mutable_material(int index);
  inline ::tinker::protobuf::ToyBase_Material* add_material();
  inline const ::google::protobuf::RepeatedPtrField< ::tinker::protobuf::ToyBase_Material >&
      material() const;
  inline ::google::protobuf::RepeatedPtrField< ::tinker::protobuf::ToyBase_Material >*
      mutable_material();

  // @@protoc_insertion_point(class_scope:tinker.protobuf.ToyBase)
 private:
  inline void set_has_visual_bounds();
  inline void clear_has_visual_bounds();
  inline void set_has_physics_bounds();
  inline void clear_has_physics_bounds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::tinker::protobuf::AABB* visual_bounds_;
  ::tinker::protobuf::AABB* physics_bounds_;
  ::google::protobuf::RepeatedPtrField< ::tinker::protobuf::ToyBase_Material > material_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_toys_2ftoy_2eproto();
  friend void protobuf_AssignDesc_toys_2ftoy_2eproto();
  friend void protobuf_ShutdownFile_toys_2ftoy_2eproto();

  void InitAsDefaultInstance();
  static ToyBase* default_instance_;
};
// -------------------------------------------------------------------

class ToyMesh_Material : public ::google::protobuf::Message {
 public:
  ToyMesh_Material();
  virtual ~ToyMesh_Material();

  ToyMesh_Material(const ToyMesh_Material& from);

  inline ToyMesh_Material& operator=(const ToyMesh_Material& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToyMesh_Material& default_instance();

  void Swap(ToyMesh_Material* other);

  // implements Message ----------------------------------------------

  ToyMesh_Material* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToyMesh_Material& from);
  void MergeFrom(const ToyMesh_Material& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float data = 1 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:tinker.protobuf.ToyMesh.Material)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_toys_2ftoy_2eproto();
  friend void protobuf_AssignDesc_toys_2ftoy_2eproto();
  friend void protobuf_ShutdownFile_toys_2ftoy_2eproto();

  void InitAsDefaultInstance();
  static ToyMesh_Material* default_instance_;
};
// -------------------------------------------------------------------

class ToyMesh : public ::google::protobuf::Message {
 public:
  ToyMesh();
  virtual ~ToyMesh();

  ToyMesh(const ToyMesh& from);

  inline ToyMesh& operator=(const ToyMesh& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToyMesh& default_instance();

  void Swap(ToyMesh* other);

  // implements Message ----------------------------------------------

  ToyMesh* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToyMesh& from);
  void MergeFrom(const ToyMesh& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ToyMesh_Material Material;

  // accessors -------------------------------------------------------

  // repeated .tinker.protobuf.ToyMesh.Material material = 1;
  inline int material_size() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 1;
  inline const ::tinker::protobuf::ToyMesh_Material& material(int index) const;
  inline ::tinker::protobuf::ToyMesh_Material* mutable_material(int index);
  inline ::tinker::protobuf::ToyMesh_Material* add_material();
  inline const ::google::protobuf::RepeatedPtrField< ::tinker::protobuf::ToyMesh_Material >&
      material() const;
  inline ::google::protobuf::RepeatedPtrField< ::tinker::protobuf::ToyMesh_Material >*
      mutable_material();

  // @@protoc_insertion_point(class_scope:tinker.protobuf.ToyMesh)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::tinker::protobuf::ToyMesh_Material > material_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_toys_2ftoy_2eproto();
  friend void protobuf_AssignDesc_toys_2ftoy_2eproto();
  friend void protobuf_ShutdownFile_toys_2ftoy_2eproto();

  void InitAsDefaultInstance();
  static ToyMesh* default_instance_;
};
// -------------------------------------------------------------------

class ToyPhys : public ::google::protobuf::Message {
 public:
  ToyPhys();
  virtual ~ToyPhys();

  ToyPhys(const ToyPhys& from);

  inline ToyPhys& operator=(const ToyPhys& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToyPhys& default_instance();

  void Swap(ToyPhys* other);

  // implements Message ----------------------------------------------

  ToyPhys* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToyPhys& from);
  void MergeFrom(const ToyPhys& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float vert = 1 [packed = true];
  inline int vert_size() const;
  inline void clear_vert();
  static const int kVertFieldNumber = 1;
  inline float vert(int index) const;
  inline void set_vert(int index, float value);
  inline void add_vert(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      vert() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_vert();

  // repeated int32 index = 2 [packed = true];
  inline int index_size() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index(int index) const;
  inline void set_index(int index, ::google::protobuf::int32 value);
  inline void add_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_index();

  // repeated .tinker.protobuf.TRS box = 3;
  inline int box_size() const;
  inline void clear_box();
  static const int kBoxFieldNumber = 3;
  inline const ::tinker::protobuf::TRS& box(int index) const;
  inline ::tinker::protobuf::TRS* mutable_box(int index);
  inline ::tinker::protobuf::TRS* add_box();
  inline const ::google::protobuf::RepeatedPtrField< ::tinker::protobuf::TRS >&
      box() const;
  inline ::google::protobuf::RepeatedPtrField< ::tinker::protobuf::TRS >*
      mutable_box();

  // optional bool concave = 4;
  inline bool has_concave() const;
  inline void clear_concave();
  static const int kConcaveFieldNumber = 4;
  inline bool concave() const;
  inline void set_concave(bool value);

  // @@protoc_insertion_point(class_scope:tinker.protobuf.ToyPhys)
 private:
  inline void set_has_concave();
  inline void clear_has_concave();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< float > vert_;
  mutable int _vert_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > index_;
  mutable int _index_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::tinker::protobuf::TRS > box_;
  bool concave_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_toys_2ftoy_2eproto();
  friend void protobuf_AssignDesc_toys_2ftoy_2eproto();
  friend void protobuf_ShutdownFile_toys_2ftoy_2eproto();

  void InitAsDefaultInstance();
  static ToyPhys* default_instance_;
};
// -------------------------------------------------------------------

class ToyArea : public ::google::protobuf::Message {
 public:
  ToyArea();
  virtual ~ToyArea();

  ToyArea(const ToyArea& from);

  inline ToyArea& operator=(const ToyArea& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToyArea& default_instance();

  void Swap(ToyArea* other);

  // implements Message ----------------------------------------------

  ToyArea* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToyArea& from);
  void MergeFrom(const ToyArea& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .tinker.protobuf.AABB size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline const ::tinker::protobuf::AABB& size() const;
  inline ::tinker::protobuf::AABB* mutable_size();
  inline ::tinker::protobuf::AABB* release_size();
  inline void set_allocated_size(::tinker::protobuf::AABB* size);

  // repeated int32 neighbor = 2 [packed = true];
  inline int neighbor_size() const;
  inline void clear_neighbor();
  static const int kNeighborFieldNumber = 2;
  inline ::google::protobuf::int32 neighbor(int index) const;
  inline void set_neighbor(int index, ::google::protobuf::int32 value);
  inline void add_neighbor(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      neighbor() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_neighbor();

  // required string file = 3;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 3;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  inline void set_allocated_file(::std::string* file);

  // @@protoc_insertion_point(class_scope:tinker.protobuf.ToyArea)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_file();
  inline void clear_has_file();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::tinker::protobuf::AABB* size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > neighbor_;
  mutable int _neighbor_cached_byte_size_;
  ::std::string* file_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_toys_2ftoy_2eproto();
  friend void protobuf_AssignDesc_toys_2ftoy_2eproto();
  friend void protobuf_ShutdownFile_toys_2ftoy_2eproto();

  void InitAsDefaultInstance();
  static ToyArea* default_instance_;
};
// -------------------------------------------------------------------

class Toy : public ::google::protobuf::Message {
 public:
  Toy();
  virtual ~Toy();

  Toy(const Toy& from);

  inline Toy& operator=(const Toy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Toy& default_instance();

  void Swap(Toy* other);

  // implements Message ----------------------------------------------

  Toy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Toy& from);
  void MergeFrom(const Toy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .tinker.protobuf.ToyBase base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::tinker::protobuf::ToyBase& base() const;
  inline ::tinker::protobuf::ToyBase* mutable_base();
  inline ::tinker::protobuf::ToyBase* release_base();
  inline void set_allocated_base(::tinker::protobuf::ToyBase* base);

  // optional .tinker.protobuf.ToyMesh mesh = 2;
  inline bool has_mesh() const;
  inline void clear_mesh();
  static const int kMeshFieldNumber = 2;
  inline const ::tinker::protobuf::ToyMesh& mesh() const;
  inline ::tinker::protobuf::ToyMesh* mutable_mesh();
  inline ::tinker::protobuf::ToyMesh* release_mesh();
  inline void set_allocated_mesh(::tinker::protobuf::ToyMesh* mesh);

  // optional .tinker.protobuf.ToyPhys phys = 3;
  inline bool has_phys() const;
  inline void clear_phys();
  static const int kPhysFieldNumber = 3;
  inline const ::tinker::protobuf::ToyPhys& phys() const;
  inline ::tinker::protobuf::ToyPhys* mutable_phys();
  inline ::tinker::protobuf::ToyPhys* release_phys();
  inline void set_allocated_phys(::tinker::protobuf::ToyPhys* phys);

  // repeated .tinker.protobuf.ToyArea area = 4;
  inline int area_size() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 4;
  inline const ::tinker::protobuf::ToyArea& area(int index) const;
  inline ::tinker::protobuf::ToyArea* mutable_area(int index);
  inline ::tinker::protobuf::ToyArea* add_area();
  inline const ::google::protobuf::RepeatedPtrField< ::tinker::protobuf::ToyArea >&
      area() const;
  inline ::google::protobuf::RepeatedPtrField< ::tinker::protobuf::ToyArea >*
      mutable_area();

  // @@protoc_insertion_point(class_scope:tinker.protobuf.Toy)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_mesh();
  inline void clear_has_mesh();
  inline void set_has_phys();
  inline void clear_has_phys();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::tinker::protobuf::ToyBase* base_;
  ::tinker::protobuf::ToyMesh* mesh_;
  ::tinker::protobuf::ToyPhys* phys_;
  ::google::protobuf::RepeatedPtrField< ::tinker::protobuf::ToyArea > area_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_toys_2ftoy_2eproto();
  friend void protobuf_AssignDesc_toys_2ftoy_2eproto();
  friend void protobuf_ShutdownFile_toys_2ftoy_2eproto();

  void InitAsDefaultInstance();
  static Toy* default_instance_;
};
// ===================================================================


// ===================================================================

// ToyBase_Material

// required string name = 1;
inline bool ToyBase_Material::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToyBase_Material::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToyBase_Material::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToyBase_Material::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ToyBase_Material::name() const {
  return *name_;
}
inline void ToyBase_Material::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ToyBase_Material::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ToyBase_Material::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ToyBase_Material::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ToyBase_Material::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ToyBase_Material::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 vertex_count = 2;
inline bool ToyBase_Material::has_vertex_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToyBase_Material::set_has_vertex_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToyBase_Material::clear_has_vertex_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToyBase_Material::clear_vertex_count() {
  vertex_count_ = 0u;
  clear_has_vertex_count();
}
inline ::google::protobuf::uint32 ToyBase_Material::vertex_count() const {
  return vertex_count_;
}
inline void ToyBase_Material::set_vertex_count(::google::protobuf::uint32 value) {
  set_has_vertex_count();
  vertex_count_ = value;
}

// required uint32 vertex_size_bytes = 3;
inline bool ToyBase_Material::has_vertex_size_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ToyBase_Material::set_has_vertex_size_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ToyBase_Material::clear_has_vertex_size_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ToyBase_Material::clear_vertex_size_bytes() {
  vertex_size_bytes_ = 0u;
  clear_has_vertex_size_bytes();
}
inline ::google::protobuf::uint32 ToyBase_Material::vertex_size_bytes() const {
  return vertex_size_bytes_;
}
inline void ToyBase_Material::set_vertex_size_bytes(::google::protobuf::uint32 value) {
  set_has_vertex_size_bytes();
  vertex_size_bytes_ = value;
}

// optional int32 uv_offset = 5 [default = -1];
inline bool ToyBase_Material::has_uv_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ToyBase_Material::set_has_uv_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ToyBase_Material::clear_has_uv_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ToyBase_Material::clear_uv_offset() {
  uv_offset_ = -1;
  clear_has_uv_offset();
}
inline ::google::protobuf::int32 ToyBase_Material::uv_offset() const {
  return uv_offset_;
}
inline void ToyBase_Material::set_uv_offset(::google::protobuf::int32 value) {
  set_has_uv_offset();
  uv_offset_ = value;
}

// optional int32 normal_offset = 6 [default = -1];
inline bool ToyBase_Material::has_normal_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ToyBase_Material::set_has_normal_offset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ToyBase_Material::clear_has_normal_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ToyBase_Material::clear_normal_offset() {
  normal_offset_ = -1;
  clear_has_normal_offset();
}
inline ::google::protobuf::int32 ToyBase_Material::normal_offset() const {
  return normal_offset_;
}
inline void ToyBase_Material::set_normal_offset(::google::protobuf::int32 value) {
  set_has_normal_offset();
  normal_offset_ = value;
}

// optional int32 tangent_offset = 7 [default = -1];
inline bool ToyBase_Material::has_tangent_offset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ToyBase_Material::set_has_tangent_offset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ToyBase_Material::clear_has_tangent_offset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ToyBase_Material::clear_tangent_offset() {
  tangent_offset_ = -1;
  clear_has_tangent_offset();
}
inline ::google::protobuf::int32 ToyBase_Material::tangent_offset() const {
  return tangent_offset_;
}
inline void ToyBase_Material::set_tangent_offset(::google::protobuf::int32 value) {
  set_has_tangent_offset();
  tangent_offset_ = value;
}

// optional int32 bitangent_offset = 8 [default = -1];
inline bool ToyBase_Material::has_bitangent_offset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ToyBase_Material::set_has_bitangent_offset() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ToyBase_Material::clear_has_bitangent_offset() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ToyBase_Material::clear_bitangent_offset() {
  bitangent_offset_ = -1;
  clear_has_bitangent_offset();
}
inline ::google::protobuf::int32 ToyBase_Material::bitangent_offset() const {
  return bitangent_offset_;
}
inline void ToyBase_Material::set_bitangent_offset(::google::protobuf::int32 value) {
  set_has_bitangent_offset();
  bitangent_offset_ = value;
}

// -------------------------------------------------------------------

// ToyBase

// optional .tinker.protobuf.AABB visual_bounds = 1;
inline bool ToyBase::has_visual_bounds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToyBase::set_has_visual_bounds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToyBase::clear_has_visual_bounds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToyBase::clear_visual_bounds() {
  if (visual_bounds_ != NULL) visual_bounds_->::tinker::protobuf::AABB::Clear();
  clear_has_visual_bounds();
}
inline const ::tinker::protobuf::AABB& ToyBase::visual_bounds() const {
  return visual_bounds_ != NULL ? *visual_bounds_ : *default_instance_->visual_bounds_;
}
inline ::tinker::protobuf::AABB* ToyBase::mutable_visual_bounds() {
  set_has_visual_bounds();
  if (visual_bounds_ == NULL) visual_bounds_ = new ::tinker::protobuf::AABB;
  return visual_bounds_;
}
inline ::tinker::protobuf::AABB* ToyBase::release_visual_bounds() {
  clear_has_visual_bounds();
  ::tinker::protobuf::AABB* temp = visual_bounds_;
  visual_bounds_ = NULL;
  return temp;
}
inline void ToyBase::set_allocated_visual_bounds(::tinker::protobuf::AABB* visual_bounds) {
  delete visual_bounds_;
  visual_bounds_ = visual_bounds;
  if (visual_bounds) {
    set_has_visual_bounds();
  } else {
    clear_has_visual_bounds();
  }
}

// optional .tinker.protobuf.AABB physics_bounds = 2;
inline bool ToyBase::has_physics_bounds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToyBase::set_has_physics_bounds() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToyBase::clear_has_physics_bounds() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToyBase::clear_physics_bounds() {
  if (physics_bounds_ != NULL) physics_bounds_->::tinker::protobuf::AABB::Clear();
  clear_has_physics_bounds();
}
inline const ::tinker::protobuf::AABB& ToyBase::physics_bounds() const {
  return physics_bounds_ != NULL ? *physics_bounds_ : *default_instance_->physics_bounds_;
}
inline ::tinker::protobuf::AABB* ToyBase::mutable_physics_bounds() {
  set_has_physics_bounds();
  if (physics_bounds_ == NULL) physics_bounds_ = new ::tinker::protobuf::AABB;
  return physics_bounds_;
}
inline ::tinker::protobuf::AABB* ToyBase::release_physics_bounds() {
  clear_has_physics_bounds();
  ::tinker::protobuf::AABB* temp = physics_bounds_;
  physics_bounds_ = NULL;
  return temp;
}
inline void ToyBase::set_allocated_physics_bounds(::tinker::protobuf::AABB* physics_bounds) {
  delete physics_bounds_;
  physics_bounds_ = physics_bounds;
  if (physics_bounds) {
    set_has_physics_bounds();
  } else {
    clear_has_physics_bounds();
  }
}

// repeated .tinker.protobuf.ToyBase.Material material = 3;
inline int ToyBase::material_size() const {
  return material_.size();
}
inline void ToyBase::clear_material() {
  material_.Clear();
}
inline const ::tinker::protobuf::ToyBase_Material& ToyBase::material(int index) const {
  return material_.Get(index);
}
inline ::tinker::protobuf::ToyBase_Material* ToyBase::mutable_material(int index) {
  return material_.Mutable(index);
}
inline ::tinker::protobuf::ToyBase_Material* ToyBase::add_material() {
  return material_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tinker::protobuf::ToyBase_Material >&
ToyBase::material() const {
  return material_;
}
inline ::google::protobuf::RepeatedPtrField< ::tinker::protobuf::ToyBase_Material >*
ToyBase::mutable_material() {
  return &material_;
}

// -------------------------------------------------------------------

// ToyMesh_Material

// repeated float data = 1 [packed = true];
inline int ToyMesh_Material::data_size() const {
  return data_.size();
}
inline void ToyMesh_Material::clear_data() {
  data_.Clear();
}
inline float ToyMesh_Material::data(int index) const {
  return data_.Get(index);
}
inline void ToyMesh_Material::set_data(int index, float value) {
  data_.Set(index, value);
}
inline void ToyMesh_Material::add_data(float value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ToyMesh_Material::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
ToyMesh_Material::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// ToyMesh

// repeated .tinker.protobuf.ToyMesh.Material material = 1;
inline int ToyMesh::material_size() const {
  return material_.size();
}
inline void ToyMesh::clear_material() {
  material_.Clear();
}
inline const ::tinker::protobuf::ToyMesh_Material& ToyMesh::material(int index) const {
  return material_.Get(index);
}
inline ::tinker::protobuf::ToyMesh_Material* ToyMesh::mutable_material(int index) {
  return material_.Mutable(index);
}
inline ::tinker::protobuf::ToyMesh_Material* ToyMesh::add_material() {
  return material_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tinker::protobuf::ToyMesh_Material >&
ToyMesh::material() const {
  return material_;
}
inline ::google::protobuf::RepeatedPtrField< ::tinker::protobuf::ToyMesh_Material >*
ToyMesh::mutable_material() {
  return &material_;
}

// -------------------------------------------------------------------

// ToyPhys

// repeated float vert = 1 [packed = true];
inline int ToyPhys::vert_size() const {
  return vert_.size();
}
inline void ToyPhys::clear_vert() {
  vert_.Clear();
}
inline float ToyPhys::vert(int index) const {
  return vert_.Get(index);
}
inline void ToyPhys::set_vert(int index, float value) {
  vert_.Set(index, value);
}
inline void ToyPhys::add_vert(float value) {
  vert_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ToyPhys::vert() const {
  return vert_;
}
inline ::google::protobuf::RepeatedField< float >*
ToyPhys::mutable_vert() {
  return &vert_;
}

// repeated int32 index = 2 [packed = true];
inline int ToyPhys::index_size() const {
  return index_.size();
}
inline void ToyPhys::clear_index() {
  index_.Clear();
}
inline ::google::protobuf::int32 ToyPhys::index(int index) const {
  return index_.Get(index);
}
inline void ToyPhys::set_index(int index, ::google::protobuf::int32 value) {
  index_.Set(index, value);
}
inline void ToyPhys::add_index(::google::protobuf::int32 value) {
  index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ToyPhys::index() const {
  return index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ToyPhys::mutable_index() {
  return &index_;
}

// repeated .tinker.protobuf.TRS box = 3;
inline int ToyPhys::box_size() const {
  return box_.size();
}
inline void ToyPhys::clear_box() {
  box_.Clear();
}
inline const ::tinker::protobuf::TRS& ToyPhys::box(int index) const {
  return box_.Get(index);
}
inline ::tinker::protobuf::TRS* ToyPhys::mutable_box(int index) {
  return box_.Mutable(index);
}
inline ::tinker::protobuf::TRS* ToyPhys::add_box() {
  return box_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tinker::protobuf::TRS >&
ToyPhys::box() const {
  return box_;
}
inline ::google::protobuf::RepeatedPtrField< ::tinker::protobuf::TRS >*
ToyPhys::mutable_box() {
  return &box_;
}

// optional bool concave = 4;
inline bool ToyPhys::has_concave() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ToyPhys::set_has_concave() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ToyPhys::clear_has_concave() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ToyPhys::clear_concave() {
  concave_ = false;
  clear_has_concave();
}
inline bool ToyPhys::concave() const {
  return concave_;
}
inline void ToyPhys::set_concave(bool value) {
  set_has_concave();
  concave_ = value;
}

// -------------------------------------------------------------------

// ToyArea

// required .tinker.protobuf.AABB size = 1;
inline bool ToyArea::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToyArea::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToyArea::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToyArea::clear_size() {
  if (size_ != NULL) size_->::tinker::protobuf::AABB::Clear();
  clear_has_size();
}
inline const ::tinker::protobuf::AABB& ToyArea::size() const {
  return size_ != NULL ? *size_ : *default_instance_->size_;
}
inline ::tinker::protobuf::AABB* ToyArea::mutable_size() {
  set_has_size();
  if (size_ == NULL) size_ = new ::tinker::protobuf::AABB;
  return size_;
}
inline ::tinker::protobuf::AABB* ToyArea::release_size() {
  clear_has_size();
  ::tinker::protobuf::AABB* temp = size_;
  size_ = NULL;
  return temp;
}
inline void ToyArea::set_allocated_size(::tinker::protobuf::AABB* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
}

// repeated int32 neighbor = 2 [packed = true];
inline int ToyArea::neighbor_size() const {
  return neighbor_.size();
}
inline void ToyArea::clear_neighbor() {
  neighbor_.Clear();
}
inline ::google::protobuf::int32 ToyArea::neighbor(int index) const {
  return neighbor_.Get(index);
}
inline void ToyArea::set_neighbor(int index, ::google::protobuf::int32 value) {
  neighbor_.Set(index, value);
}
inline void ToyArea::add_neighbor(::google::protobuf::int32 value) {
  neighbor_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ToyArea::neighbor() const {
  return neighbor_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ToyArea::mutable_neighbor() {
  return &neighbor_;
}

// required string file = 3;
inline bool ToyArea::has_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ToyArea::set_has_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ToyArea::clear_has_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ToyArea::clear_file() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& ToyArea::file() const {
  return *file_;
}
inline void ToyArea::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void ToyArea::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void ToyArea::set_file(const char* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ToyArea::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  return file_;
}
inline ::std::string* ToyArea::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ToyArea::set_allocated_file(::std::string* file) {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (file) {
    set_has_file();
    file_ = file;
  } else {
    clear_has_file();
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Toy

// required .tinker.protobuf.ToyBase base = 1;
inline bool Toy::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Toy::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Toy::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Toy::clear_base() {
  if (base_ != NULL) base_->::tinker::protobuf::ToyBase::Clear();
  clear_has_base();
}
inline const ::tinker::protobuf::ToyBase& Toy::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::tinker::protobuf::ToyBase* Toy::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::tinker::protobuf::ToyBase;
  return base_;
}
inline ::tinker::protobuf::ToyBase* Toy::release_base() {
  clear_has_base();
  ::tinker::protobuf::ToyBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline void Toy::set_allocated_base(::tinker::protobuf::ToyBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
}

// optional .tinker.protobuf.ToyMesh mesh = 2;
inline bool Toy::has_mesh() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Toy::set_has_mesh() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Toy::clear_has_mesh() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Toy::clear_mesh() {
  if (mesh_ != NULL) mesh_->::tinker::protobuf::ToyMesh::Clear();
  clear_has_mesh();
}
inline const ::tinker::protobuf::ToyMesh& Toy::mesh() const {
  return mesh_ != NULL ? *mesh_ : *default_instance_->mesh_;
}
inline ::tinker::protobuf::ToyMesh* Toy::mutable_mesh() {
  set_has_mesh();
  if (mesh_ == NULL) mesh_ = new ::tinker::protobuf::ToyMesh;
  return mesh_;
}
inline ::tinker::protobuf::ToyMesh* Toy::release_mesh() {
  clear_has_mesh();
  ::tinker::protobuf::ToyMesh* temp = mesh_;
  mesh_ = NULL;
  return temp;
}
inline void Toy::set_allocated_mesh(::tinker::protobuf::ToyMesh* mesh) {
  delete mesh_;
  mesh_ = mesh;
  if (mesh) {
    set_has_mesh();
  } else {
    clear_has_mesh();
  }
}

// optional .tinker.protobuf.ToyPhys phys = 3;
inline bool Toy::has_phys() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Toy::set_has_phys() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Toy::clear_has_phys() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Toy::clear_phys() {
  if (phys_ != NULL) phys_->::tinker::protobuf::ToyPhys::Clear();
  clear_has_phys();
}
inline const ::tinker::protobuf::ToyPhys& Toy::phys() const {
  return phys_ != NULL ? *phys_ : *default_instance_->phys_;
}
inline ::tinker::protobuf::ToyPhys* Toy::mutable_phys() {
  set_has_phys();
  if (phys_ == NULL) phys_ = new ::tinker::protobuf::ToyPhys;
  return phys_;
}
inline ::tinker::protobuf::ToyPhys* Toy::release_phys() {
  clear_has_phys();
  ::tinker::protobuf::ToyPhys* temp = phys_;
  phys_ = NULL;
  return temp;
}
inline void Toy::set_allocated_phys(::tinker::protobuf::ToyPhys* phys) {
  delete phys_;
  phys_ = phys;
  if (phys) {
    set_has_phys();
  } else {
    clear_has_phys();
  }
}

// repeated .tinker.protobuf.ToyArea area = 4;
inline int Toy::area_size() const {
  return area_.size();
}
inline void Toy::clear_area() {
  area_.Clear();
}
inline const ::tinker::protobuf::ToyArea& Toy::area(int index) const {
  return area_.Get(index);
}
inline ::tinker::protobuf::ToyArea* Toy::mutable_area(int index) {
  return area_.Mutable(index);
}
inline ::tinker::protobuf::ToyArea* Toy::add_area() {
  return area_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tinker::protobuf::ToyArea >&
Toy::area() const {
  return area_;
}
inline ::google::protobuf::RepeatedPtrField< ::tinker::protobuf::ToyArea >*
Toy::mutable_area() {
  return &area_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace tinker

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_toys_2ftoy_2eproto__INCLUDED
