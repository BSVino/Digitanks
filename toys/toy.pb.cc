// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: toys/toy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "toys/toy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tinker {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* ToyBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToyBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToyBase_Material_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToyBase_Material_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToyMesh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToyMesh_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToyMesh_Material_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToyMesh_Material_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToyPhys_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToyPhys_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToyArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToyArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* Toy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Toy_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_toys_2ftoy_2eproto() {
  protobuf_AddDesc_toys_2ftoy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "toys/toy.proto");
  GOOGLE_CHECK(file != NULL);
  ToyBase_descriptor_ = file->message_type(0);
  static const int ToyBase_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyBase, visual_bounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyBase, physics_bounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyBase, material_),
  };
  ToyBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToyBase_descriptor_,
      ToyBase::default_instance_,
      ToyBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToyBase));
  ToyBase_Material_descriptor_ = ToyBase_descriptor_->nested_type(0);
  static const int ToyBase_Material_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyBase_Material, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyBase_Material, vertex_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyBase_Material, vertex_size_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyBase_Material, uv_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyBase_Material, normal_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyBase_Material, tangent_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyBase_Material, bitangent_offset_),
  };
  ToyBase_Material_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToyBase_Material_descriptor_,
      ToyBase_Material::default_instance_,
      ToyBase_Material_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyBase_Material, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyBase_Material, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToyBase_Material));
  ToyMesh_descriptor_ = file->message_type(1);
  static const int ToyMesh_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyMesh, material_),
  };
  ToyMesh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToyMesh_descriptor_,
      ToyMesh::default_instance_,
      ToyMesh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyMesh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyMesh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToyMesh));
  ToyMesh_Material_descriptor_ = ToyMesh_descriptor_->nested_type(0);
  static const int ToyMesh_Material_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyMesh_Material, data_),
  };
  ToyMesh_Material_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToyMesh_Material_descriptor_,
      ToyMesh_Material::default_instance_,
      ToyMesh_Material_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyMesh_Material, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyMesh_Material, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToyMesh_Material));
  ToyPhys_descriptor_ = file->message_type(2);
  static const int ToyPhys_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyPhys, vert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyPhys, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyPhys, box_),
  };
  ToyPhys_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToyPhys_descriptor_,
      ToyPhys::default_instance_,
      ToyPhys_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyPhys, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyPhys, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToyPhys));
  ToyArea_descriptor_ = file->message_type(3);
  static const int ToyArea_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyArea, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyArea, neighbor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyArea, file_),
  };
  ToyArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToyArea_descriptor_,
      ToyArea::default_instance_,
      ToyArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToyArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToyArea));
  Toy_descriptor_ = file->message_type(4);
  static const int Toy_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Toy, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Toy, mesh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Toy, phys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Toy, area_),
  };
  Toy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Toy_descriptor_,
      Toy::default_instance_,
      Toy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Toy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Toy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Toy));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_toys_2ftoy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToyBase_descriptor_, &ToyBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToyBase_Material_descriptor_, &ToyBase_Material::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToyMesh_descriptor_, &ToyMesh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToyMesh_Material_descriptor_, &ToyMesh_Material::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToyPhys_descriptor_, &ToyPhys::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToyArea_descriptor_, &ToyArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Toy_descriptor_, &Toy::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_toys_2ftoy_2eproto() {
  delete ToyBase::default_instance_;
  delete ToyBase_reflection_;
  delete ToyBase_Material::default_instance_;
  delete ToyBase_Material_reflection_;
  delete ToyMesh::default_instance_;
  delete ToyMesh_reflection_;
  delete ToyMesh_Material::default_instance_;
  delete ToyMesh_Material_reflection_;
  delete ToyPhys::default_instance_;
  delete ToyPhys_reflection_;
  delete ToyArea::default_instance_;
  delete ToyArea_reflection_;
  delete Toy::default_instance_;
  delete Toy_reflection_;
}

void protobuf_AddDesc_toys_2ftoy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tinker::protobuf::protobuf_AddDesc_common_2fprotobuf_2fmath_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016toys/toy.proto\022\017tinker.protobuf\032\032commo"
    "n/protobuf/math.proto\"\323\002\n\007ToyBase\022,\n\rvis"
    "ual_bounds\030\001 \001(\0132\025.tinker.protobuf.AABB\022"
    "-\n\016physics_bounds\030\002 \001(\0132\025.tinker.protobu"
    "f.AABB\0223\n\010material\030\003 \003(\0132!.tinker.protob"
    "uf.ToyBase.Material\032\265\001\n\010Material\022\014\n\004name"
    "\030\001 \002(\t\022\024\n\014vertex_count\030\002 \002(\r\022\031\n\021vertex_s"
    "ize_bytes\030\003 \002(\r\022\025\n\tuv_offset\030\005 \001(\005:\002-1\022\031"
    "\n\rnormal_offset\030\006 \001(\005:\002-1\022\032\n\016tangent_off"
    "set\030\007 \001(\005:\002-1\022\034\n\020bitangent_offset\030\010 \001(\005:"
    "\002-1\"\\\n\007ToyMesh\0223\n\010material\030\001 \003(\0132!.tinke"
    "r.protobuf.ToyMesh.Material\032\034\n\010Material\022"
    "\020\n\004data\030\001 \003(\002B\002\020\001\"Q\n\007ToyPhys\022\020\n\004vert\030\001 \003"
    "(\002B\002\020\001\022\021\n\005index\030\002 \003(\005B\002\020\001\022!\n\003box\030\003 \003(\0132\024"
    ".tinker.protobuf.TRS\"R\n\007ToyArea\022#\n\004size\030"
    "\001 \002(\0132\025.tinker.protobuf.AABB\022\024\n\010neighbor"
    "\030\002 \003(\005B\002\020\001\022\014\n\004file\030\003 \002(\t\"\245\001\n\003Toy\022&\n\004base"
    "\030\001 \002(\0132\030.tinker.protobuf.ToyBase\022&\n\004mesh"
    "\030\002 \001(\0132\030.tinker.protobuf.ToyMesh\022&\n\004phys"
    "\030\003 \001(\0132\030.tinker.protobuf.ToyPhys\022&\n\004area"
    "\030\004 \003(\0132\030.tinker.protobuf.ToyArea", 832);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "toys/toy.proto", &protobuf_RegisterTypes);
  ToyBase::default_instance_ = new ToyBase();
  ToyBase_Material::default_instance_ = new ToyBase_Material();
  ToyMesh::default_instance_ = new ToyMesh();
  ToyMesh_Material::default_instance_ = new ToyMesh_Material();
  ToyPhys::default_instance_ = new ToyPhys();
  ToyArea::default_instance_ = new ToyArea();
  Toy::default_instance_ = new Toy();
  ToyBase::default_instance_->InitAsDefaultInstance();
  ToyBase_Material::default_instance_->InitAsDefaultInstance();
  ToyMesh::default_instance_->InitAsDefaultInstance();
  ToyMesh_Material::default_instance_->InitAsDefaultInstance();
  ToyPhys::default_instance_->InitAsDefaultInstance();
  ToyArea::default_instance_->InitAsDefaultInstance();
  Toy::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_toys_2ftoy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_toys_2ftoy_2eproto {
  StaticDescriptorInitializer_toys_2ftoy_2eproto() {
    protobuf_AddDesc_toys_2ftoy_2eproto();
  }
} static_descriptor_initializer_toys_2ftoy_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ToyBase_Material::kNameFieldNumber;
const int ToyBase_Material::kVertexCountFieldNumber;
const int ToyBase_Material::kVertexSizeBytesFieldNumber;
const int ToyBase_Material::kUvOffsetFieldNumber;
const int ToyBase_Material::kNormalOffsetFieldNumber;
const int ToyBase_Material::kTangentOffsetFieldNumber;
const int ToyBase_Material::kBitangentOffsetFieldNumber;
#endif  // !_MSC_VER

ToyBase_Material::ToyBase_Material()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToyBase_Material::InitAsDefaultInstance() {
}

ToyBase_Material::ToyBase_Material(const ToyBase_Material& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToyBase_Material::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vertex_count_ = 0u;
  vertex_size_bytes_ = 0u;
  uv_offset_ = -1;
  normal_offset_ = -1;
  tangent_offset_ = -1;
  bitangent_offset_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToyBase_Material::~ToyBase_Material() {
  SharedDtor();
}

void ToyBase_Material::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ToyBase_Material::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToyBase_Material::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToyBase_Material_descriptor_;
}

const ToyBase_Material& ToyBase_Material::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toys_2ftoy_2eproto();
  return *default_instance_;
}

ToyBase_Material* ToyBase_Material::default_instance_ = NULL;

ToyBase_Material* ToyBase_Material::New() const {
  return new ToyBase_Material;
}

void ToyBase_Material::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    vertex_count_ = 0u;
    vertex_size_bytes_ = 0u;
    uv_offset_ = -1;
    normal_offset_ = -1;
    tangent_offset_ = -1;
    bitangent_offset_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToyBase_Material::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vertex_count;
        break;
      }

      // required uint32 vertex_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertex_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vertex_count_)));
          set_has_vertex_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vertex_size_bytes;
        break;
      }

      // required uint32 vertex_size_bytes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertex_size_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vertex_size_bytes_)));
          set_has_vertex_size_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uv_offset;
        break;
      }

      // optional int32 uv_offset = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uv_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uv_offset_)));
          set_has_uv_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_normal_offset;
        break;
      }

      // optional int32 normal_offset = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normal_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &normal_offset_)));
          set_has_normal_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tangent_offset;
        break;
      }

      // optional int32 tangent_offset = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tangent_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tangent_offset_)));
          set_has_tangent_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bitangent_offset;
        break;
      }

      // optional int32 bitangent_offset = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bitangent_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bitangent_offset_)));
          set_has_bitangent_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToyBase_Material::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint32 vertex_count = 2;
  if (has_vertex_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vertex_count(), output);
  }

  // required uint32 vertex_size_bytes = 3;
  if (has_vertex_size_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vertex_size_bytes(), output);
  }

  // optional int32 uv_offset = 5 [default = -1];
  if (has_uv_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->uv_offset(), output);
  }

  // optional int32 normal_offset = 6 [default = -1];
  if (has_normal_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->normal_offset(), output);
  }

  // optional int32 tangent_offset = 7 [default = -1];
  if (has_tangent_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tangent_offset(), output);
  }

  // optional int32 bitangent_offset = 8 [default = -1];
  if (has_bitangent_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bitangent_offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToyBase_Material::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 vertex_count = 2;
  if (has_vertex_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vertex_count(), target);
  }

  // required uint32 vertex_size_bytes = 3;
  if (has_vertex_size_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vertex_size_bytes(), target);
  }

  // optional int32 uv_offset = 5 [default = -1];
  if (has_uv_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->uv_offset(), target);
  }

  // optional int32 normal_offset = 6 [default = -1];
  if (has_normal_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->normal_offset(), target);
  }

  // optional int32 tangent_offset = 7 [default = -1];
  if (has_tangent_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->tangent_offset(), target);
  }

  // optional int32 bitangent_offset = 8 [default = -1];
  if (has_bitangent_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bitangent_offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToyBase_Material::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 vertex_count = 2;
    if (has_vertex_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vertex_count());
    }

    // required uint32 vertex_size_bytes = 3;
    if (has_vertex_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vertex_size_bytes());
    }

    // optional int32 uv_offset = 5 [default = -1];
    if (has_uv_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uv_offset());
    }

    // optional int32 normal_offset = 6 [default = -1];
    if (has_normal_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->normal_offset());
    }

    // optional int32 tangent_offset = 7 [default = -1];
    if (has_tangent_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tangent_offset());
    }

    // optional int32 bitangent_offset = 8 [default = -1];
    if (has_bitangent_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bitangent_offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToyBase_Material::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToyBase_Material* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToyBase_Material*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToyBase_Material::MergeFrom(const ToyBase_Material& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_vertex_count()) {
      set_vertex_count(from.vertex_count());
    }
    if (from.has_vertex_size_bytes()) {
      set_vertex_size_bytes(from.vertex_size_bytes());
    }
    if (from.has_uv_offset()) {
      set_uv_offset(from.uv_offset());
    }
    if (from.has_normal_offset()) {
      set_normal_offset(from.normal_offset());
    }
    if (from.has_tangent_offset()) {
      set_tangent_offset(from.tangent_offset());
    }
    if (from.has_bitangent_offset()) {
      set_bitangent_offset(from.bitangent_offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToyBase_Material::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToyBase_Material::CopyFrom(const ToyBase_Material& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToyBase_Material::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ToyBase_Material::Swap(ToyBase_Material* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(vertex_count_, other->vertex_count_);
    std::swap(vertex_size_bytes_, other->vertex_size_bytes_);
    std::swap(uv_offset_, other->uv_offset_);
    std::swap(normal_offset_, other->normal_offset_);
    std::swap(tangent_offset_, other->tangent_offset_);
    std::swap(bitangent_offset_, other->bitangent_offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToyBase_Material::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToyBase_Material_descriptor_;
  metadata.reflection = ToyBase_Material_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ToyBase::kVisualBoundsFieldNumber;
const int ToyBase::kPhysicsBoundsFieldNumber;
const int ToyBase::kMaterialFieldNumber;
#endif  // !_MSC_VER

ToyBase::ToyBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToyBase::InitAsDefaultInstance() {
  visual_bounds_ = const_cast< ::tinker::protobuf::AABB*>(&::tinker::protobuf::AABB::default_instance());
  physics_bounds_ = const_cast< ::tinker::protobuf::AABB*>(&::tinker::protobuf::AABB::default_instance());
}

ToyBase::ToyBase(const ToyBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToyBase::SharedCtor() {
  _cached_size_ = 0;
  visual_bounds_ = NULL;
  physics_bounds_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToyBase::~ToyBase() {
  SharedDtor();
}

void ToyBase::SharedDtor() {
  if (this != default_instance_) {
    delete visual_bounds_;
    delete physics_bounds_;
  }
}

void ToyBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToyBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToyBase_descriptor_;
}

const ToyBase& ToyBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toys_2ftoy_2eproto();
  return *default_instance_;
}

ToyBase* ToyBase::default_instance_ = NULL;

ToyBase* ToyBase::New() const {
  return new ToyBase;
}

void ToyBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_visual_bounds()) {
      if (visual_bounds_ != NULL) visual_bounds_->::tinker::protobuf::AABB::Clear();
    }
    if (has_physics_bounds()) {
      if (physics_bounds_ != NULL) physics_bounds_->::tinker::protobuf::AABB::Clear();
    }
  }
  material_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToyBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tinker.protobuf.AABB visual_bounds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visual_bounds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_physics_bounds;
        break;
      }

      // optional .tinker.protobuf.AABB physics_bounds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_physics_bounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_physics_bounds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_material;
        break;
      }

      // repeated .tinker.protobuf.ToyBase.Material material = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_material()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_material;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToyBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .tinker.protobuf.AABB visual_bounds = 1;
  if (has_visual_bounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->visual_bounds(), output);
  }

  // optional .tinker.protobuf.AABB physics_bounds = 2;
  if (has_physics_bounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->physics_bounds(), output);
  }

  // repeated .tinker.protobuf.ToyBase.Material material = 3;
  for (int i = 0; i < this->material_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->material(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToyBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .tinker.protobuf.AABB visual_bounds = 1;
  if (has_visual_bounds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->visual_bounds(), target);
  }

  // optional .tinker.protobuf.AABB physics_bounds = 2;
  if (has_physics_bounds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->physics_bounds(), target);
  }

  // repeated .tinker.protobuf.ToyBase.Material material = 3;
  for (int i = 0; i < this->material_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->material(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToyBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .tinker.protobuf.AABB visual_bounds = 1;
    if (has_visual_bounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->visual_bounds());
    }

    // optional .tinker.protobuf.AABB physics_bounds = 2;
    if (has_physics_bounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->physics_bounds());
    }

  }
  // repeated .tinker.protobuf.ToyBase.Material material = 3;
  total_size += 1 * this->material_size();
  for (int i = 0; i < this->material_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->material(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToyBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToyBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToyBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToyBase::MergeFrom(const ToyBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  material_.MergeFrom(from.material_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_visual_bounds()) {
      mutable_visual_bounds()->::tinker::protobuf::AABB::MergeFrom(from.visual_bounds());
    }
    if (from.has_physics_bounds()) {
      mutable_physics_bounds()->::tinker::protobuf::AABB::MergeFrom(from.physics_bounds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToyBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToyBase::CopyFrom(const ToyBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToyBase::IsInitialized() const {

  if (has_visual_bounds()) {
    if (!this->visual_bounds().IsInitialized()) return false;
  }
  if (has_physics_bounds()) {
    if (!this->physics_bounds().IsInitialized()) return false;
  }
  for (int i = 0; i < material_size(); i++) {
    if (!this->material(i).IsInitialized()) return false;
  }
  return true;
}

void ToyBase::Swap(ToyBase* other) {
  if (other != this) {
    std::swap(visual_bounds_, other->visual_bounds_);
    std::swap(physics_bounds_, other->physics_bounds_);
    material_.Swap(&other->material_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToyBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToyBase_descriptor_;
  metadata.reflection = ToyBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToyMesh_Material::kDataFieldNumber;
#endif  // !_MSC_VER

ToyMesh_Material::ToyMesh_Material()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToyMesh_Material::InitAsDefaultInstance() {
}

ToyMesh_Material::ToyMesh_Material(const ToyMesh_Material& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToyMesh_Material::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToyMesh_Material::~ToyMesh_Material() {
  SharedDtor();
}

void ToyMesh_Material::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToyMesh_Material::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToyMesh_Material::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToyMesh_Material_descriptor_;
}

const ToyMesh_Material& ToyMesh_Material::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toys_2ftoy_2eproto();
  return *default_instance_;
}

ToyMesh_Material* ToyMesh_Material::default_instance_ = NULL;

ToyMesh_Material* ToyMesh_Material::New() const {
  return new ToyMesh_Material;
}

void ToyMesh_Material::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToyMesh_Material::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float data = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToyMesh_Material::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float data = 1 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToyMesh_Material::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float data = 1 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToyMesh_Material::ByteSize() const {
  int total_size = 0;

  // repeated float data = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToyMesh_Material::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToyMesh_Material* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToyMesh_Material*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToyMesh_Material::MergeFrom(const ToyMesh_Material& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToyMesh_Material::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToyMesh_Material::CopyFrom(const ToyMesh_Material& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToyMesh_Material::IsInitialized() const {

  return true;
}

void ToyMesh_Material::Swap(ToyMesh_Material* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToyMesh_Material::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToyMesh_Material_descriptor_;
  metadata.reflection = ToyMesh_Material_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ToyMesh::kMaterialFieldNumber;
#endif  // !_MSC_VER

ToyMesh::ToyMesh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToyMesh::InitAsDefaultInstance() {
}

ToyMesh::ToyMesh(const ToyMesh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToyMesh::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToyMesh::~ToyMesh() {
  SharedDtor();
}

void ToyMesh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToyMesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToyMesh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToyMesh_descriptor_;
}

const ToyMesh& ToyMesh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toys_2ftoy_2eproto();
  return *default_instance_;
}

ToyMesh* ToyMesh::default_instance_ = NULL;

ToyMesh* ToyMesh::New() const {
  return new ToyMesh;
}

void ToyMesh::Clear() {
  material_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToyMesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tinker.protobuf.ToyMesh.Material material = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_material()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_material;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToyMesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tinker.protobuf.ToyMesh.Material material = 1;
  for (int i = 0; i < this->material_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->material(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToyMesh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tinker.protobuf.ToyMesh.Material material = 1;
  for (int i = 0; i < this->material_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->material(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToyMesh::ByteSize() const {
  int total_size = 0;

  // repeated .tinker.protobuf.ToyMesh.Material material = 1;
  total_size += 1 * this->material_size();
  for (int i = 0; i < this->material_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->material(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToyMesh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToyMesh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToyMesh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToyMesh::MergeFrom(const ToyMesh& from) {
  GOOGLE_CHECK_NE(&from, this);
  material_.MergeFrom(from.material_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToyMesh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToyMesh::CopyFrom(const ToyMesh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToyMesh::IsInitialized() const {

  return true;
}

void ToyMesh::Swap(ToyMesh* other) {
  if (other != this) {
    material_.Swap(&other->material_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToyMesh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToyMesh_descriptor_;
  metadata.reflection = ToyMesh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToyPhys::kVertFieldNumber;
const int ToyPhys::kIndexFieldNumber;
const int ToyPhys::kBoxFieldNumber;
#endif  // !_MSC_VER

ToyPhys::ToyPhys()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToyPhys::InitAsDefaultInstance() {
}

ToyPhys::ToyPhys(const ToyPhys& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToyPhys::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToyPhys::~ToyPhys() {
  SharedDtor();
}

void ToyPhys::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToyPhys::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToyPhys::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToyPhys_descriptor_;
}

const ToyPhys& ToyPhys::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toys_2ftoy_2eproto();
  return *default_instance_;
}

ToyPhys* ToyPhys::default_instance_ = NULL;

ToyPhys* ToyPhys::New() const {
  return new ToyPhys;
}

void ToyPhys::Clear() {
  vert_.Clear();
  index_.Clear();
  box_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToyPhys::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float vert = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_vert())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_vert())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_index;
        break;
      }

      // repeated int32 index = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_box;
        break;
      }

      // repeated .tinker.protobuf.TRS box = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_box()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_box;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToyPhys::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float vert = 1 [packed = true];
  if (this->vert_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vert_cached_byte_size_);
  }
  for (int i = 0; i < this->vert_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->vert(i), output);
  }

  // repeated int32 index = 2 [packed = true];
  if (this->index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_index_cached_byte_size_);
  }
  for (int i = 0; i < this->index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->index(i), output);
  }

  // repeated .tinker.protobuf.TRS box = 3;
  for (int i = 0; i < this->box_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->box(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToyPhys::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float vert = 1 [packed = true];
  if (this->vert_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vert_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vert_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->vert(i), target);
  }

  // repeated int32 index = 2 [packed = true];
  if (this->index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _index_cached_byte_size_, target);
  }
  for (int i = 0; i < this->index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->index(i), target);
  }

  // repeated .tinker.protobuf.TRS box = 3;
  for (int i = 0; i < this->box_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->box(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToyPhys::ByteSize() const {
  int total_size = 0;

  // repeated float vert = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->vert_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vert_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 index = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->index(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _index_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .tinker.protobuf.TRS box = 3;
  total_size += 1 * this->box_size();
  for (int i = 0; i < this->box_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->box(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToyPhys::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToyPhys* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToyPhys*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToyPhys::MergeFrom(const ToyPhys& from) {
  GOOGLE_CHECK_NE(&from, this);
  vert_.MergeFrom(from.vert_);
  index_.MergeFrom(from.index_);
  box_.MergeFrom(from.box_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToyPhys::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToyPhys::CopyFrom(const ToyPhys& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToyPhys::IsInitialized() const {

  for (int i = 0; i < box_size(); i++) {
    if (!this->box(i).IsInitialized()) return false;
  }
  return true;
}

void ToyPhys::Swap(ToyPhys* other) {
  if (other != this) {
    vert_.Swap(&other->vert_);
    index_.Swap(&other->index_);
    box_.Swap(&other->box_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToyPhys::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToyPhys_descriptor_;
  metadata.reflection = ToyPhys_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToyArea::kSizeFieldNumber;
const int ToyArea::kNeighborFieldNumber;
const int ToyArea::kFileFieldNumber;
#endif  // !_MSC_VER

ToyArea::ToyArea()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToyArea::InitAsDefaultInstance() {
  size_ = const_cast< ::tinker::protobuf::AABB*>(&::tinker::protobuf::AABB::default_instance());
}

ToyArea::ToyArea(const ToyArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToyArea::SharedCtor() {
  _cached_size_ = 0;
  size_ = NULL;
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToyArea::~ToyArea() {
  SharedDtor();
}

void ToyArea::SharedDtor() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (this != default_instance_) {
    delete size_;
  }
}

void ToyArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToyArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToyArea_descriptor_;
}

const ToyArea& ToyArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toys_2ftoy_2eproto();
  return *default_instance_;
}

ToyArea* ToyArea::default_instance_ = NULL;

ToyArea* ToyArea::New() const {
  return new ToyArea;
}

void ToyArea::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_size()) {
      if (size_ != NULL) size_->::tinker::protobuf::AABB::Clear();
    }
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::kEmptyString) {
        file_->clear();
      }
    }
  }
  neighbor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToyArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tinker.protobuf.AABB size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_neighbor;
        break;
      }

      // repeated int32 neighbor = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_neighbor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_neighbor())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_neighbor())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file;
        break;
      }

      // required string file = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToyArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tinker.protobuf.AABB size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->size(), output);
  }

  // repeated int32 neighbor = 2 [packed = true];
  if (this->neighbor_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_neighbor_cached_byte_size_);
  }
  for (int i = 0; i < this->neighbor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->neighbor(i), output);
  }

  // required string file = 3;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->file(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToyArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tinker.protobuf.AABB size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->size(), target);
  }

  // repeated int32 neighbor = 2 [packed = true];
  if (this->neighbor_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _neighbor_cached_byte_size_, target);
  }
  for (int i = 0; i < this->neighbor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->neighbor(i), target);
  }

  // required string file = 3;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToyArea::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tinker.protobuf.AABB size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

    // required string file = 3;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }

  }
  // repeated int32 neighbor = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->neighbor_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->neighbor(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _neighbor_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToyArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToyArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToyArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToyArea::MergeFrom(const ToyArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  neighbor_.MergeFrom(from.neighbor_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      mutable_size()->::tinker::protobuf::AABB::MergeFrom(from.size());
    }
    if (from.has_file()) {
      set_file(from.file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToyArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToyArea::CopyFrom(const ToyArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToyArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  return true;
}

void ToyArea::Swap(ToyArea* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    neighbor_.Swap(&other->neighbor_);
    std::swap(file_, other->file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToyArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToyArea_descriptor_;
  metadata.reflection = ToyArea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Toy::kBaseFieldNumber;
const int Toy::kMeshFieldNumber;
const int Toy::kPhysFieldNumber;
const int Toy::kAreaFieldNumber;
#endif  // !_MSC_VER

Toy::Toy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Toy::InitAsDefaultInstance() {
  base_ = const_cast< ::tinker::protobuf::ToyBase*>(&::tinker::protobuf::ToyBase::default_instance());
  mesh_ = const_cast< ::tinker::protobuf::ToyMesh*>(&::tinker::protobuf::ToyMesh::default_instance());
  phys_ = const_cast< ::tinker::protobuf::ToyPhys*>(&::tinker::protobuf::ToyPhys::default_instance());
}

Toy::Toy(const Toy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Toy::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  mesh_ = NULL;
  phys_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Toy::~Toy() {
  SharedDtor();
}

void Toy::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete mesh_;
    delete phys_;
  }
}

void Toy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Toy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Toy_descriptor_;
}

const Toy& Toy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toys_2ftoy_2eproto();
  return *default_instance_;
}

Toy* Toy::default_instance_ = NULL;

Toy* Toy::New() const {
  return new Toy;
}

void Toy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::tinker::protobuf::ToyBase::Clear();
    }
    if (has_mesh()) {
      if (mesh_ != NULL) mesh_->::tinker::protobuf::ToyMesh::Clear();
    }
    if (has_phys()) {
      if (phys_ != NULL) phys_->::tinker::protobuf::ToyPhys::Clear();
    }
  }
  area_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Toy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tinker.protobuf.ToyBase base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mesh;
        break;
      }

      // optional .tinker.protobuf.ToyMesh mesh = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mesh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mesh()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phys;
        break;
      }

      // optional .tinker.protobuf.ToyPhys phys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_phys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_area;
        break;
      }

      // repeated .tinker.protobuf.ToyArea area = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_area()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_area;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Toy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tinker.protobuf.ToyBase base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .tinker.protobuf.ToyMesh mesh = 2;
  if (has_mesh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mesh(), output);
  }

  // optional .tinker.protobuf.ToyPhys phys = 3;
  if (has_phys()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->phys(), output);
  }

  // repeated .tinker.protobuf.ToyArea area = 4;
  for (int i = 0; i < this->area_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->area(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Toy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tinker.protobuf.ToyBase base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .tinker.protobuf.ToyMesh mesh = 2;
  if (has_mesh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mesh(), target);
  }

  // optional .tinker.protobuf.ToyPhys phys = 3;
  if (has_phys()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->phys(), target);
  }

  // repeated .tinker.protobuf.ToyArea area = 4;
  for (int i = 0; i < this->area_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->area(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Toy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tinker.protobuf.ToyBase base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .tinker.protobuf.ToyMesh mesh = 2;
    if (has_mesh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mesh());
    }

    // optional .tinker.protobuf.ToyPhys phys = 3;
    if (has_phys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->phys());
    }

  }
  // repeated .tinker.protobuf.ToyArea area = 4;
  total_size += 1 * this->area_size();
  for (int i = 0; i < this->area_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->area(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Toy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Toy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Toy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Toy::MergeFrom(const Toy& from) {
  GOOGLE_CHECK_NE(&from, this);
  area_.MergeFrom(from.area_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::tinker::protobuf::ToyBase::MergeFrom(from.base());
    }
    if (from.has_mesh()) {
      mutable_mesh()->::tinker::protobuf::ToyMesh::MergeFrom(from.mesh());
    }
    if (from.has_phys()) {
      mutable_phys()->::tinker::protobuf::ToyPhys::MergeFrom(from.phys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Toy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Toy::CopyFrom(const Toy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Toy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (has_phys()) {
    if (!this->phys().IsInitialized()) return false;
  }
  for (int i = 0; i < area_size(); i++) {
    if (!this->area(i).IsInitialized()) return false;
  }
  return true;
}

void Toy::Swap(Toy* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(mesh_, other->mesh_);
    std::swap(phys_, other->phys_);
    area_.Swap(&other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Toy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Toy_descriptor_;
  metadata.reflection = Toy_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace tinker

// @@protoc_insertion_point(global_scope)
